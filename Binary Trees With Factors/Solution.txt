class Solution {
    public int numFactoredBinaryTrees(int[] arr) {
        Arrays.sort(arr);
        int n = arr.length;
        long ans = 0;
        int mod = 1_000_000_007;
        Map<Integer,Long> map = new HashMap<>();
        map.put(1,1l);
        for(int i=0;i<n;i++){
            int num = arr[i];
            long counts = 0;
            map.put(arr[i],1l);
            for(int j=0;j<=i;j++){
                if(num % arr[j] == 0){
                    int required = num / arr[j];
                    if(map.containsKey(required)){
                        long count1 = map.get(arr[j]);
                        long count2 = map.get(required);
                        counts = (counts + (count1 * count2)) % mod;
                    }
                }
            }
            map.put(arr[i],counts);
            ans = (ans+counts) % mod;
        }
        return (int)ans;

    }
}